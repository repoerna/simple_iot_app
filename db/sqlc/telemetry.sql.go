// Code generated by sqlc. DO NOT EDIT.
// source: telemetry.sql

package db

import (
	"context"
	"database/sql"
)

const createTM = `-- name: CreateTM :one
INSERT INTO telemetry (
    deviceid,
    createdat,
    latitude,
    longitude,
    value,
    value2,
    value3,
    value4
) VALUES (
    $1, now(), $2, $3, $4, $5, $6, $7
)
RETURNING id, deviceid, createdat, latitude, longitude, value, value2, value3, value4
`

type CreateTMParams struct {
	Deviceid  int64           `json:"deviceid"`
	Latitude  interface{}     `json:"latitude"`
	Longitude interface{}     `json:"longitude"`
	Value     sql.NullFloat64 `json:"value"`
	Value2    sql.NullFloat64 `json:"value2"`
	Value3    sql.NullFloat64 `json:"value3"`
	Value4    sql.NullFloat64 `json:"value4"`
}

func (q *Queries) CreateTM(ctx context.Context, arg CreateTMParams) (Telemetry, error) {
	row := q.db.QueryRowContext(ctx, createTM,
		arg.Deviceid,
		arg.Latitude,
		arg.Longitude,
		arg.Value,
		arg.Value2,
		arg.Value3,
		arg.Value4,
	)
	var i Telemetry
	err := row.Scan(
		&i.ID,
		&i.Deviceid,
		&i.Createdat,
		&i.Latitude,
		&i.Longitude,
		&i.Value,
		&i.Value2,
		&i.Value3,
		&i.Value4,
	)
	return i, err
}

const getTMByDeviceID = `-- name: GetTMByDeviceID :many
SELECT id, deviceid, createdat, latitude, longitude, value, value2, value3, value4 FROM telemetry
WHERE deviceid = $1
ORDER BY createdat
LIMIT $2
OFFSET $3
`

type GetTMByDeviceIDParams struct {
	Deviceid int64 `json:"deviceid"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetTMByDeviceID(ctx context.Context, arg GetTMByDeviceIDParams) ([]Telemetry, error) {
	rows, err := q.db.QueryContext(ctx, getTMByDeviceID, arg.Deviceid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Telemetry{}
	for rows.Next() {
		var i Telemetry
		if err := rows.Scan(
			&i.ID,
			&i.Deviceid,
			&i.Createdat,
			&i.Latitude,
			&i.Longitude,
			&i.Value,
			&i.Value2,
			&i.Value3,
			&i.Value4,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTMByID = `-- name: GetTMByID :one
SELECT id, deviceid, createdat, latitude, longitude, value, value2, value3, value4 FROM telemetry
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTMByID(ctx context.Context, id int64) (Telemetry, error) {
	row := q.db.QueryRowContext(ctx, getTMByID, id)
	var i Telemetry
	err := row.Scan(
		&i.ID,
		&i.Deviceid,
		&i.Createdat,
		&i.Latitude,
		&i.Longitude,
		&i.Value,
		&i.Value2,
		&i.Value3,
		&i.Value4,
	)
	return i, err
}
