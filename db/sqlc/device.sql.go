// Code generated by sqlc. DO NOT EDIT.
// source: device.sql

package db

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO device (
  name,
  shortname,
  enabled,
  createdat,
  updatedat
) VALUES (
  $1, $2, $3, now(), now()
)
RETURNING id, name, shortname, enabled, createdat, updatedat
`

type CreateDeviceParams struct {
	Name      string `json:"name"`
	Shortname string `json:"shortname"`
	Enabled   bool   `json:"enabled"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice, arg.Name, arg.Shortname, arg.Enabled)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Shortname,
		&i.Enabled,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM device
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, name, shortname, enabled, createdat, updatedat FROM device
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Shortname,
		&i.Enabled,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, name, shortname, enabled, createdat, updatedat FROM device
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetDevicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetDevices(ctx context.Context, arg GetDevicesParams) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Shortname,
			&i.Enabled,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE device SET 
name = $2,
shortname = $3,
enabled = $4,
updatedat = now()
WHERE id = $1
RETURNING id, name, shortname, enabled, createdat, updatedat
`

type UpdateDeviceParams struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Shortname string `json:"shortname"`
	Enabled   bool   `json:"enabled"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, updateDevice,
		arg.ID,
		arg.Name,
		arg.Shortname,
		arg.Enabled,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Shortname,
		&i.Enabled,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
